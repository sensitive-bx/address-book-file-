#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
//#define MAX 1000
#define DEFAULT_SZ 3
#define MAX_NAME 20
#define MAX_SEX 2
#define MAX_TELE 12
#define MAX_ADDR 30
void nenu();
int FindByName(struct Contact *ps, char name[MAX_NAME]);
void InitContact(struct Contact* ps); 
void AddContact(struct Contact* ps);
void SearchContact(struct Contact*ps);
void DelContact(struct Contact*ps);
void ShowContact(const struct Contact*ps);
void ModifyContact(struct Contact*ps);
void CheckCapacity(struct Contact *ps);
void DestroyContact(struct Contact* ps); 
void SaveContact(struct Contact* ps);
void LoadContact(struct Contact* ps);
struct PeoInfo    
{
    char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	char tele[MAX_TELE];
	char addr[MAX_ADDR];	
};
//通讯录类型
struct Contact 
{
    struct PeoInfo *data;   //con就是通讯录，里面包含1000个人的信息和size 
	int size;               //记录当前已经有的元素的个数
	int capacity;           //当前通讯录最大容量	
}; 
enum Option
{
	EXIT,
	ADD,
	DEL,
	SEARCH,
	MODIFY,
	SHOW,
	SAVE
};
int main(void)
{
	int input = 0;
	int size = 0;
	//创建通讯录
	struct Contact con;    //data指针,size, capacity 
	//初始通讯录
	InitContact(&con); 
	do
	{
		nenu();
		printf("请选择： ");
		scanf("%d", &input);
		switch(input)
		{
			case (EXIT):
				//销毁通讯录-释放动态开辟內存
				SaveContact(&con);   //最好保存一下 
				DestroyContact(&con); 
				printf("退出\n"); 
			    break;
		    case (ADD):
		    	AddContact(&con);
			    break;
			case (DEL):
				DelContact(&con);
			    break;
			case (SEARCH):
				SearchContact(&con);
			    break;
			case (MODIFY):
				ModifyContact(&con);
			    break;
			case (SHOW):
				ShowContact(&con);
			    break;
			case(SAVE):
				SaveContact(&con);
				break;
			default:
			    printf("选择错误\n");
				break;	
		} 
    }
	while(input);
	return 0;
}
void DestroyContact(struct Contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}
void nenu()
{
	printf("****************************\n");
	printf("***1.add        2.del    ***\n");
	printf("***3.search     4.modify ***\n");
	printf("***5.show       6.save   ***\n");
	printf("***             0.exit   ***\n");
	printf("****************************\n");
}

//初始通讯录的函数 
void InitContact(struct Contact* ps)
{
	//开辟空间 
	ps->data = (struct PeoInfo*)malloc(DEFAULT_SZ*sizeof(struct PeoInfo));
	if(ps->data == NULL)
	{
        return;
	}
	ps->size = 0;
	ps->capacity = DEFAULT_SZ;
	// 把文件已经存放的通讯录信息加载到通讯录里中
	LoadContact(ps); 
}
//加载文件中中的信息到通讯录
void LoadContact(struct Contact* ps)
{
	struct PeoInfo temp = {0};
	FILE* pfRead = fopen("Contact.dat", "rb");
	if(pfRead == NULL)
	{
		printf("LoadContact:%s\n", strerror(errno));
		return;
	}
	//读取文件放到存放的通讯录中
	while(fread(&temp, sizeof(struct PeoInfo), 1, pfRead))
	{
		//返回1
		CheckCapacity(ps);
		ps->data[ps->size] = temp;
		ps->size++;
 	}
	fclose(pfRead);
	pfRead = NULL; 
	
} 
//增加一个信息到通讯录 
void AddContact(struct Contact* ps)
{
	//判断空间是否增容
	//1.如果满了，增减空间
	//2.如果不满，啥事不干 
	CheckCapacity(ps); 
	//增加数据 
    	printf("请输入名字： ");
		scanf("%s", (ps->data[ps->size]).name);
		printf("请输入年龄： ");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入性别： "); 
		scanf("%s", (ps->data[ps->size]).sex);
		printf("请输入电话： "); 
		scanf("%s", (ps->data[ps->size]).tele);
		printf("请输入地址： ");
		scanf("%s", (ps->data[ps->size]).addr);
		ps->size++;
		printf("添加成功\n"); 
}
void CheckCapacity(struct Contact *ps)
{
	if(ps->size == ps->capacity)
	{
		//增容
	    struct PeoInfo* ptr	= 
		(struct PeoInfo*)realloc(ps->data, (ps->capacity+2)*sizeof(struct PeoInfo));
	    if(ptr!=NULL)
	    {
	    	ps->data = ptr;
	    	ps->capacity+=2;
	    	printf("增容成功\n");
		}
		else
		{
			printf("增容失败\n");
		}
	}
 } 
//打印通讯录的信息 
void ShowContact(const struct Contact*ps)
{
	if(ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		int i = 0;
		for(i = 0; i < ps->size; i++)
		{
			printf("%-5s %-5s %-5s %-5s %-5s\n", "名字", "年龄", "性别","电话", "住址");
			printf("%-5s ", ((ps->data[i]).name));
			printf("%-5d ", ((ps->data[i]).age));
			printf("%-5s ", ((ps->data[i]).sex));
			printf("%-5s ", ((ps->data[i]).tele));
			printf("%-5s ", ((ps->data[i]).addr));
			printf("\n");
		}
	}
}
//删除通讯录的联系人
void DelContact(struct Contact*ps)
{
	char name[MAX_NAME];
	printf("请输入要删除人的名字\n");
	scanf("%s", name);
	//1.查找删除人的名字在那个位置
	//找到了返回名字所在元素的下标
	//找不到返回-1
	int pos = FindByName(ps, name); 
	
	//2.删除
	if(pos == -1)
	{
		printf("删除的人不存在\n");
	}
	else
	{
	    int j = 0;
	    for(j = pos; j < ps->size - 1; j++)
	    {
	    	ps->data[j] = ps->data[j+1];
		}
		ps->size--;
		printf("删除成功\n"); 	
	}
	
 } 
int FindByName(struct Contact *ps, char name[MAX_NAME])
{
	int i = 0;
	for(i = 0; ps->size; i++)
	{
		if(0 == strcmp(ps->data[i].name, name))
		{
			return i; 
		}
	} 
	return -1;
}
//查找通讯里的联系人 
void SearchContact(struct Contact*ps)
{
	char name[MAX_NAME];
	printf("请输入要查找人的名字： \n");
	scanf("%s", name);
	//1.查找删除人的名字在那个位置
	//找到了返回名字所在元素的下标
	//找不到返回-1
	int pos = FindByName(ps, name); 
	//2.删除
	if(pos == -1)
	{
		printf("查找的人不存在\n");
	}
	else
	{
			printf("%-5s %-5s %-5s %-5s %-5s\n", "名字", "年龄", "性别","电话", "住址");
			printf("%-5s ", ((ps->data[pos]).name));
			printf("%-5d ", ((ps->data[pos]).age));
			printf("%-5s ", ((ps->data[pos]).sex));
			printf("%-5s ", ((ps->data[pos]).tele));
			printf("%-5s ", ((ps->data[pos]).addr));
			printf("\n");
	}
}
void ModifyContact(struct Contact*ps)
{
	char name[MAX_NAME];
	printf("请输入要修改人的名字： ");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if(pos == -1)
	{
		printf("要修改人的信息不存在\n"); 
	}
	else
	{
		printf("请输入名字： ");
		scanf("%s", (ps->data[ps->size]).name);
		printf("请输入年龄： ");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入性别： "); 
		scanf("%s", (ps->data[ps->size]).sex);
		printf("请输入电话： "); 
		scanf("%s", (ps->data[ps->size]).tele);
		printf("请输入地址： ");
		scanf("%s", (ps->data[ps->size]).addr);
		printf("修改成功\n");
	}
}
//保存文件 
void SaveContact(struct Contact* ps)
{
	FILE* pfWrite = fopen("Contact.dat", "wb");    //二进制形式
	if(pfWrite == NULL)
	{
		printf("SaveContact：%s\n", strerror(errno));
		return;
	 } 
	 //打开成功,写通讯录中的数据到文件中
	int i = 0;
	for(i = 0; i < ps->size; i++)
	{
	    fwrite(&(ps->data[i]), sizeof(struct PeoInfo), 1, pfWrite);	
	} 
	fclose(pfWrite); 
	pfWrite = NULL;
} 
